{"version":3,"sources":["components/UIElements/Spinner.js","MapConfig/MapChart.js","MapConfig/PolygonSeries.js","MapConfig/MeaselsSeries.js","MapConfig/MapData.js","MapConfig/index.js","components/Map.js","index.js","App.js"],"names":["className","MapChart","ele","this","am4core","am4themes_animated","chart","am4maps","geodata","am4geodata_worldLow","e","raiseCriticalError","Error","panBehavior","projection","Orthographic","paddingValue","padding","seaColorHex","delLng","delLat","zoomControl","backgroundSeries","mapPolygons","template","polygon","fill","fillOpacity","deltaLongitude","deltaLatitude","adapter","add","delatLatitude","fitToRange","linesColor","graticuleSeries","series","push","mapLines","stroke","fitExtent","strokeOpacity","PolygonSeries","polygonSeries","useGeodata","calculateVisualCenter","tooltip","background","cornerRadius","nonScalingStroke","propertyFields","id","tooltipPosition","events","on","event","target","dummyData","isHover","hoverColor","hs","states","create","properties","MeaselsSeries","textColor","pointColor","hoverPointColor","measelsSeries","autoTextColor","label","dy","measelTemplate","hs2","MapData","data","each","mapPolygon","cases","confirmed","multiPolygon","visualLongitude","visualLatitude","Math","max","log","LN10","tooltipText","dataItem","dataContext","name","recovered","deaths","buildMap","element","initMap","createMap","mapProjection","chartConfig","createPolygonSeries","hoverSeries","createMeaselsSeries","mapDataToMap","useState","isLoading","setIsLoading","mapEl","useRef","useEffect","getCountriesCases","a","url","fetch","response","json","dataArr","countries","filter","iso2","map","country","Promise","all","countriesData","countryISO2","detail","slice","countryData","value","reduce","acc","cur","Object","assign","current","ref","ReactDOM","render","document","getElementById"],"mappings":"+SAIe,G,OAAA,kBAAM,yBAAKA,UAAU,UAAf,gB,kDCCRC,EAAb,WACE,WAAYC,GAAM,oBAChBC,KAAKD,IAAMA,EAFf,wDAYIE,IAAiBC,KAGjB,IAAIC,EAAQF,IAAeD,KAAKD,IAAKK,KAErC,IACED,EAAME,QAAUC,IAChB,MAAOC,GACPJ,EAAMK,mBACJ,IAAIC,MACF,uNAKN,OADAT,KAAKG,MAAQA,EACNA,IA3BX,oCA8BgBO,GAA+B,IAAD,EAE1CV,KAAKG,MAAMQ,WAAa,IAAIP,IAAoBQ,aAChDZ,KAAKG,MAAMO,YAAcA,EAHiB,2BAAdG,EAAc,iCAAdA,EAAc,mBAI1C,EAAAb,KAAKG,OAAMW,QAAX,QAAsBD,KAlC1B,kCAqCcE,EAAaC,EAAQC,GAG/BjB,KAAKG,MAAMe,YAAc,IAAId,IAE7BJ,KAAKG,MAAMgB,iBAAiBC,YAAYC,SAASC,QAAQC,KAAOtB,IAC9Dc,GAEFf,KAAKG,MAAMgB,iBAAiBC,YAAYC,SAASC,QAAQE,YAAc,EACvExB,KAAKG,MAAMsB,eAAiBT,EAC5BhB,KAAKG,MAAMuB,cAAgBT,EAG3BjB,KAAKG,MAAMwB,QAAQC,IAAI,iBAAiB,SAASC,GAC/C,OAAO5B,IAAa6B,WAAWD,GAAgB,GAAI,SAnDzD,+BAuDWE,GACP,IAAIC,EAAkBhC,KAAKG,MAAM8B,OAAOC,KAAK,IAAI9B,KACjD4B,EAAgBG,SAASd,SAASe,OAASnC,IAAc8B,GACzDC,EAAgBK,WAAY,EAC5BL,EAAgBG,SAASd,SAASiB,cAAgB,MA3DtD,6BAMI,OAAOtC,KAAKG,UANhB,KCFaoC,EAAb,WACE,WAAYpC,GAAQ,oBAClBH,KAAKG,MAAQA,EAFjB,kEAMI,IAAIqC,EAAgBxC,KAAKG,MAAM8B,OAAOC,KAAK,IAAI9B,KAC/CoC,EAAcC,YAAa,EAE3BD,EAAcE,uBAAwB,EACtCF,EAAcG,QAAQC,WAAWpB,YAAc,EAC/CgB,EAAcG,QAAQC,WAAWC,aAAe,EAEhD,IAAIxB,EAAWmB,EAAcpB,YAAYC,SAqBzC,OApBAA,EAASyB,kBAAmB,EAC5BzB,EAASE,KAAOtB,IAAc,WAC9BoB,EAASe,OAASnC,IAAc,WAEhCuC,EAAcE,uBAAwB,EACtCrB,EAAS0B,eAAeC,GAAK,KAC7B3B,EAAS4B,gBAAkB,QAC3B5B,EAASG,YAAc,EAEvBH,EAAS6B,OAAOC,GAAG,QAAQ,SAASC,GAC9BA,EAAMC,OAAOC,YACfF,EAAMC,OAAOC,UAAUC,SAAU,MAGrClC,EAAS6B,OAAOC,GAAG,OAAO,SAASC,GAC7BA,EAAMC,OAAOC,YACfF,EAAMC,OAAOC,UAAUC,SAAU,MAGrCvD,KAAKwC,cAAgBA,EACdA,IAlCX,kCAqCcgB,GACV,IAAIC,EAAKzD,KAAKwC,cAAcpB,YAAYC,SAASqC,OAAOC,OAAO,SAC/DF,EAAGG,WAAWpC,YAAc,EAC5BiC,EAAGG,WAAWrC,KAAOtB,IAAcuD,OAxCvC,KCAaK,EAAb,WACE,WAAY1D,GAAQ,oBAClBH,KAAKG,MAAQA,EAFjB,gEAKsB2D,EAAWC,EAAYC,GACzC,IAAIC,EAAgBjE,KAAKG,MAAM8B,OAAOC,KAAK,IAAI9B,KAE/C6D,EAActB,QAAQC,WAAWpB,YAAc,EAC/CyC,EAActB,QAAQC,WAAWC,aAAe,GAChDoB,EAActB,QAAQuB,eAAgB,EACtCD,EAActB,QAAQwB,MAAM5C,KAAOtB,IAAc6D,GACjDG,EAActB,QAAQyB,IAAM,EAE5B,IAAIC,EAAiBJ,EAAc7C,YAAYC,SAC/CgD,EAAe9C,KAAOtB,IAAc8D,GACpCM,EAAe/B,cAAgB,EAC/B+B,EAAe7C,YAAc,IAC7B6C,EAAepB,gBAAkB,QAEjC,IAAIqB,EAAML,EAAc7C,YAAYC,SAASqC,OAAOC,OAAO,SAG3D,OAFAW,EAAIV,WAAWpC,YAAc,EAC7B8C,EAAIV,WAAWrC,KAAOtB,IAAc+D,GAC7BC,MAvBX,KCDaM,EAAb,WACE,WAAY/B,EAAeyB,GAAgB,oBACzCjE,KAAKwC,cAAgBA,EACrBxC,KAAKiE,cAAgBA,EAHzB,yDAMeO,GAAO,IAAD,OACjBxE,KAAKwC,cAAcU,OAAOC,GAAG,UAAU,WACrC,EAAKX,cAAcpB,YAAYqD,MAAK,SAAAC,GAClC,IAAIC,EAAQH,EAAKE,EAAW1B,IAE5B,IAAS,OAAL2B,QAAK,IAALA,OAAA,EAAAA,EAAOC,WAAY,EAAG,CACxB,IAAItD,EAAU,EAAK2C,cAAc7C,YAAYuC,SAC7CrC,EAAQuD,aAAezE,IACrBsE,EAAWI,gBACXJ,EAAWK,eACXC,KAAKC,IAAI,GAAMD,KAAKE,IAAIP,EAAMC,WAAaI,KAAKG,KAAQ,KAE1D7D,EAAQ8D,YAAR,UAAyBV,EAAWW,SAASC,YAAYC,KAAzD,0HACwBZ,EAAMC,UAD9B,sGAEqBD,EAAMa,UAF3B,gGAGoBb,EAAMc,OAH1B,kBAKAf,EAAWpB,UAAYhC,EACvBA,EAAQ4B,OAAOC,GAAG,QAAQ,WACxBuB,EAAWnB,SAAU,KAEvBjC,EAAQ4B,OAAOC,GAAG,OAAO,WACvBuB,EAAWnB,SAAU,UAGvBmB,EAAWU,YACTV,EAAWW,SAASC,YAAYC,KAAO,oHACzCb,EAAWlD,YAAc,aAjCnC,KCGO,SAASkE,EAASC,EAASnB,GAEhC,IAAMoB,EAAU,IAAI9F,EAAS6F,GAC7BC,EAAQC,YAGRD,EAAQE,cAAc,gBAAiB,GAAI,GAAI,GAAI,IAGnD,IAKQ9E,GAJG,GAIKC,GAHL,GAKX2E,EAAQG,YAAY,UAAW/E,EAAQC,GAIvC2E,EAAQzD,SAAS,WAGjB,IAAM6D,EAAsB,IAAIzD,EAAcqD,EAAQzF,OAChDqC,EAAgBwD,EAAoBA,sBAC1CA,EAAoBC,YAAY,WAGhC,IAEMhC,EAFoB,IAAIJ,EAAc+B,EAAQzF,OAEZ+F,oBACtC,OACA,UACA,WAIc,IAAI3B,EAAQ/B,EAAeyB,GACnCkC,aAAa3B,G,WCrCR,aAAO,IAAD,EACe4B,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,KAEbC,EAAQC,mBA4Cd,OA3CAC,qBAAU,WACR,sBAAC,iBACgBC,EADhB,aAAAC,EAAA,iGAAAA,EAAA,MACC,WAAiCC,GAAjC,uBAAAD,EAAA,sEACyBE,MAAMD,GAD/B,cACQE,EADR,gBAGqBA,EAASC,OAH9B,cAGQvC,EAHR,OAKQwC,EAAUxC,EAAKyC,UAClBC,QAAO,SAAAD,GAAS,OAAIA,EAAUE,QAC9BC,KAAI,SAAAC,GAAO,gBAAOT,EAAP,YAAcS,EAAQF,SAPtC,SAS0BG,QAAQC,IAC9BP,EAAQI,IAAR,uCAAY,WAAMR,GAAN,eAAAD,EAAA,sEAEaE,MAAMD,GAFnB,cAEJE,EAFI,gBAGGA,EAASC,OAHZ,mFAAZ,wDAVJ,cASQE,EATR,OAiBQO,EAAgBP,EACnBC,QAAO,SAAAG,GAAO,OAAIA,EAAQzC,aAC1BwC,KAAI,SAAAC,GACH,IAAMI,EAAcJ,EAAQzC,UAAU8C,OAAOC,MAAM,GAAI,IACjDC,EAAc,CAClBhD,UAAWyC,EAAQzC,UAAUiD,MAC7BrC,UAAW6B,EAAQ7B,UAAUqC,MAC7BpC,OAAQ4B,EAAQ5B,OAAOoC,OAGzB,OAAO,eAAGJ,EAAcG,MAEzBE,QAAO,SAACC,EAAKC,GAAN,OAAcC,OAAOC,OAAOH,EAAKC,KAAM,IA7BnD,kBA8BSR,GA9BT,6CADD,uBACgBd,EADhB,qDAkCoBA,EACjB,4CAnCH,OAkCOlC,EAlCP,OAqCC8B,GAAa,GACbZ,EAASa,EAAM4B,QAAS3D,GAtCzB,0CAAD,KAwCC,IAEI6B,EAAY,kBAAC,EAAD,MAAc,yBAAK+B,IAAK7B,EAAO1G,UAAU,SC/C9DwI,IAASC,OAAO,mBCFD,kBACb,6BACE,kBAAC,EAAD,SDAY,MAASC,SAASC,eAAe,W","file":"static/js/main.7f567540.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Spinner.css';\n\nexport default () => <div className='loader'>Loading...</div>;\n","import * as am4core from '@amcharts/amcharts4/core';\nimport * as am4maps from '@amcharts/amcharts4/maps';\nimport am4geodata_worldLow from '@amcharts/amcharts4-geodata/worldLow';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\n\nexport class MapChart {\n  constructor(ele) {\n    this.ele = ele;\n  }\n\n  static get chart() {\n    return this.chart;\n  }\n\n  createMap() {\n    /* Chart code */\n    // Themes begin\n    am4core.useTheme(am4themes_animated);\n    // Themes end\n    // Create map instance\n    let chart = am4core.create(this.ele, am4maps.MapChart);\n\n    try {\n      chart.geodata = am4geodata_worldLow;\n    } catch (e) {\n      chart.raiseCriticalError(\n        new Error(\n          'Map geodata could not be loaded. Please download the latest <a href=\"https://www.amcharts.com/download/download-v4/\">amcharts geodata</a> and extract its contents into the same directory as your amCharts files.'\n        )\n      );\n    }\n    this.chart = chart;\n    return chart;\n  }\n\n  mapProjection(panBehavior, ...paddingValue) {\n    // Set projection\n    this.chart.projection = new am4maps.projections.Orthographic();\n    this.chart.panBehavior = panBehavior;\n    this.chart.padding(...paddingValue);\n  }\n\n  chartConfig(seaColorHex, delLng, delLat) {\n    // Add zoom control\n\n    this.chart.zoomControl = new am4maps.ZoomControl();\n\n    this.chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\n      seaColorHex\n    );\n    this.chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 1;\n    this.chart.deltaLongitude = delLng;\n    this.chart.deltaLatitude = delLat;\n\n    // limits vertical rotation\n    this.chart.adapter.add('deltaLatitude', function(delatLatitude) {\n      return am4core.math.fitToRange(delatLatitude, -90, 90);\n    });\n  }\n\n  mapLines(linesColor) {\n    let graticuleSeries = this.chart.series.push(new am4maps.GraticuleSeries());\n    graticuleSeries.mapLines.template.stroke = am4core.color(linesColor);\n    graticuleSeries.fitExtent = false;\n    graticuleSeries.mapLines.template.strokeOpacity = 0.2;\n  }\n}\n","import * as am4core from '@amcharts/amcharts4/core';\nimport * as am4maps from '@amcharts/amcharts4/maps';\n\nexport class PolygonSeries {\n  constructor(chart) {\n    this.chart = chart;\n  }\n  createPolygonSeries() {\n    // Create map polygon series\n    let polygonSeries = this.chart.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.useGeodata = true;\n\n    polygonSeries.calculateVisualCenter = true;\n    polygonSeries.tooltip.background.fillOpacity = 1;\n    polygonSeries.tooltip.background.cornerRadius = 5;\n\n    let template = polygonSeries.mapPolygons.template;\n    template.nonScalingStroke = true;\n    template.fill = am4core.color('#212121');\n    template.stroke = am4core.color('#4e4e4e');\n\n    polygonSeries.calculateVisualCenter = true;\n    template.propertyFields.id = 'id';\n    template.tooltipPosition = 'fixed';\n    template.fillOpacity = 1;\n\n    template.events.on('over', function(event) {\n      if (event.target.dummyData) {\n        event.target.dummyData.isHover = true;\n      }\n    });\n    template.events.on('out', function(event) {\n      if (event.target.dummyData) {\n        event.target.dummyData.isHover = false;\n      }\n    });\n    this.polygonSeries = polygonSeries;\n    return polygonSeries;\n  }\n\n  hoverSeries(hoverColor) {\n    let hs = this.polygonSeries.mapPolygons.template.states.create('hover');\n    hs.properties.fillOpacity = 1;\n    hs.properties.fill = am4core.color(hoverColor);\n  }\n}\n","import * as am4core from '@amcharts/amcharts4/core';\nimport * as am4maps from '@amcharts/amcharts4/maps';\n\nexport class MeaselsSeries {\n  constructor(chart) {\n    this.chart = chart;\n  }\n\n  createMeaselsSeries(textColor, pointColor, hoverPointColor) {\n    let measelsSeries = this.chart.series.push(new am4maps.MapPolygonSeries());\n\n    measelsSeries.tooltip.background.fillOpacity = 1;\n    measelsSeries.tooltip.background.cornerRadius = 10;\n    measelsSeries.tooltip.autoTextColor = false;\n    measelsSeries.tooltip.label.fill = am4core.color(textColor); //'#000'\n    measelsSeries.tooltip.dy = -5;\n\n    let measelTemplate = measelsSeries.mapPolygons.template;\n    measelTemplate.fill = am4core.color(pointColor); //'#bf7569'\n    measelTemplate.strokeOpacity = 0;\n    measelTemplate.fillOpacity = 0.75;\n    measelTemplate.tooltipPosition = 'fixed';\n\n    let hs2 = measelsSeries.mapPolygons.template.states.create('hover');\n    hs2.properties.fillOpacity = 1;\n    hs2.properties.fill = am4core.color(hoverPointColor); //'#86240c'\n    return measelsSeries;\n  }\n}\n","import * as am4maps from '@amcharts/amcharts4/maps';\n\nexport class MapData {\n  constructor(polygonSeries, measelsSeries) {\n    this.polygonSeries = polygonSeries;\n    this.measelsSeries = measelsSeries;\n  }\n\n  mapDataToMap(data) {\n    this.polygonSeries.events.on('inited', () => {\n      this.polygonSeries.mapPolygons.each(mapPolygon => {\n        let cases = data[mapPolygon.id];\n\n        if (cases?.confirmed > 0) {\n          let polygon = this.measelsSeries.mapPolygons.create();\n          polygon.multiPolygon = am4maps.getCircle(\n            mapPolygon.visualLongitude,\n            mapPolygon.visualLatitude,\n            Math.max(0.2, (Math.log(cases.confirmed) * Math.LN10) / 10)\n          );\n          polygon.tooltipText = `${mapPolygon.dataItem.dataContext.name}: \n             الحالات المُسجلة : ${cases.confirmed}\n             حالات التعافي : ${cases.recovered}\n             حالات الوفاة : ${cases.deaths}\n            `;\n          mapPolygon.dummyData = polygon;\n          polygon.events.on('over', function() {\n            mapPolygon.isHover = true;\n          });\n          polygon.events.on('out', function() {\n            mapPolygon.isHover = false;\n          });\n        } else {\n          mapPolygon.tooltipText =\n            mapPolygon.dataItem.dataContext.name + ': لا توجد بيانات مٌسجلة';\n          mapPolygon.fillOpacity = 0.9;\n        }\n      });\n    });\n  }\n}\n","import { MapChart } from './MapChart';\nimport { PolygonSeries } from './PolygonSeries';\nimport { MeaselsSeries } from './MeaselsSeries';\nimport { MapData } from './MapData';\n\nexport function buildMap(element, data) {\n  //init a and create map\n  const initMap = new MapChart(element);\n  initMap.createMap();\n\n  //define map porjection\n  initMap.mapProjection('rotateLongLat', 20, 20, 20, 20);\n\n  // lng and lat to center map in first loading\n  const mapCenter = {\n    delLng: -30,\n    delLat: -30\n  };\n\n  const { delLng, delLat } = mapCenter;\n  // center map in first loading\n  initMap.chartConfig('#000000', delLng, delLat);\n\n  //create shadow when you move map\n  // drow map lines and set lines color\n  initMap.mapLines('#ff0000');\n\n  //define polygon series and set color when hover\n  const createPolygonSeries = new PolygonSeries(initMap.chart);\n  const polygonSeries = createPolygonSeries.createPolygonSeries();\n  createPolygonSeries.hoverSeries('#767E91');\n\n  // create point that represent data on map\n  const initMeaselsSeries = new MeaselsSeries(initMap.chart);\n\n  const measelsSeries = initMeaselsSeries.createMeaselsSeries(\n    '#eee',\n    '#B30000',\n    '#993400'\n  );\n\n  // '#B30000',\n  const mapData = new MapData(polygonSeries, measelsSeries);\n  mapData.mapDataToMap(data);\n}\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport Spinner from './UIElements/Spinner';\nimport { buildMap } from '../MapConfig';\nimport './Map.css';\n\nexport default () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const mapEl = useRef();\n  useEffect(() => {\n    (async function() {\n      async function getCountriesCases(url) {\n        const response = await fetch(url);\n\n        const data = await response.json();\n\n        const dataArr = data.countries\n          .filter(countries => countries.iso2)\n          .map(country => `${url}/${country.iso2}`);\n\n        const countries = await Promise.all(\n          dataArr.map(async url => {\n            // rturn fetch(url).then(response => response.json());\n            const response = await fetch(url);\n            return await response.json();\n          })\n        );\n\n        const countriesData = countries\n          .filter(country => country.confirmed)\n          .map(country => {\n            const countryISO2 = country.confirmed.detail.slice(41, 43);\n            const countryData = {\n              confirmed: country.confirmed.value,\n              recovered: country.recovered.value,\n              deaths: country.deaths.value\n            };\n\n            return { [countryISO2]: countryData };\n          })\n          .reduce((acc, cur) => Object.assign(acc, cur), {});\n        return countriesData;\n      }\n\n      const data = await getCountriesCases(\n        'https://covid19.mathdro.id/api/countries'\n      );\n      setIsLoading(false);\n      buildMap(mapEl.current, data);\n    })();\n  }, []);\n\n  return isLoading ? <Spinner /> : <div ref={mapEl} className='Map'></div>;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","import React from 'react';\nimport Map from './components/Map';\n\nexport default () => (\n  <div>\n    <Map />\n  </div>\n);\n"],"sourceRoot":""}